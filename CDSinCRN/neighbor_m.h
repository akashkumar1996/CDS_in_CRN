//
// Generated file, do not edit! Created by nedtool 5.2 from neighbor.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __NEIGHBOR_M_H
#define __NEIGHBOR_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>neighbor.msg:16</tt> by nedtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * message neighbor
 * {
 *     int flag;
 *     int key;
 *     int neighbour;
 *     int id;
 *     int clusterCount;
 *     int cdsClusters[];
 * }
 * </pre>
 */
class neighbor : public ::omnetpp::cMessage
{
  protected:
    int flag;
    int key;
    int neighbour;
    int id;
    int clusterCount;
    int *cdsClusters; // array ptr
    unsigned int cdsClusters_arraysize;

  private:
    void copy(const neighbor& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const neighbor&);

  public:
    neighbor(const char *name=nullptr, short kind=0);
    neighbor(const neighbor& other);
    virtual ~neighbor();
    neighbor& operator=(const neighbor& other);
    virtual neighbor *dup() const override {return new neighbor(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getFlag() const;
    virtual void setFlag(int flag);
    virtual int getKey() const;
    virtual void setKey(int key);
    virtual int getNeighbour() const;
    virtual void setNeighbour(int neighbour);
    virtual int getId() const;
    virtual void setId(int id);
    virtual int getClusterCount() const;
    virtual void setClusterCount(int clusterCount);
    virtual void setCdsClustersArraySize(unsigned int size);
    virtual unsigned int getCdsClustersArraySize() const;
    virtual int getCdsClusters(unsigned int k) const;
    virtual void setCdsClusters(unsigned int k, int cdsClusters);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const neighbor& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, neighbor& obj) {obj.parsimUnpack(b);}


#endif // ifndef __NEIGHBOR_M_H

